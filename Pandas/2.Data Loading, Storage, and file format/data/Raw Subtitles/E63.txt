Sanyam Bhutani  0:13  
Hey, this is Sanyam Bhutani and you're listening to "Chai Time Data Science", a podcast for data science enthusiasts, where I interview practitioners, researchers, and Kagglers about their journey, experience, and talk all things about data science.

Sanyam Bhutani  0:45  
Hello, and welcome to another episode of the "Chai Time Data Science" show. In this episode, I interview my friend from the fast SI family, Robert Bracco. Actually correction it's it's not an interview, it's a conversation between the two of us where we essentially we discuss or interview each other about how we approach learning to learn a team I recently picked up for the podcast. And of course, as you might imagine, we talk a lot about the fast AI courses and how our approach to learning to learning has evolved as we have approved the materials. Robert has been working on the fast.ai, the fast AI audio module, the unofficial audio module, and I asked him about his journey in that direction, how has his learnings evolved? Of course, I've interviewed him about his journey in a in the previous episode, so please do check that out if you're interested. This is the first episode where I have 11 cups of Chai in the during the conversation, so I hope it's as enjoyable for you as it was for me. For now here's my conversation with Rob please enjoy the show.

Sanyam Bhutani  2:07  
Hi, everyone, welcome to the first conversation on the interview series so to speak. So I hope you'll forgive me if if you don't want to hear me talking, but I am on the call with Robert Bracco. Thank you so much for agreeing to this crazy idea.

Rob Bracco  2:21  
Oh yeah, thanks for having me. I'm super excited. Ever since I did the first podcast with you about audio. I've been dying to come back and just talk about all things fast AI self education, learning. So really excited.

Sanyam Bhutani  2:34  
Likewise I think we have a lot of and we've been chatting about it constantly back and forth. I think it's it's a good way to articulate all of these ideas. So I want to start with what and this will be I think this for the audience reference this'll be  a conversation that I'll dial have a lot of back and forth but what made you start fast AI, what what made you decide to do that investment?

Rob Bracco  2:59  
Yeah, I had just completed, I was a bit lost and kind of wandering. And I ended up deciding I need some structure. I'm not going to go back to school. So I took three online courses at the same time and tried to pretend it was a formal college semester, I sat down, I was like, I'm going to be there at 8am this work until 12, five days a week. And I did that. And one of those courses was intro to machine learning. And during on Coursera really famous machine learning course. And I came out of it and I wasn't able to build anything. I was really excited about machine learning. I felt like I understood backpropagation I'd built a digit recognizer in Octave. And I came out and was like, I'm, you know, really no closer to doing what I want to do. And somehow I just got super lucky. That day, I came across, I think my twitter and I read the intro from Jeremy saying, like, top down, we're focused on building and I was like, this is the thing so I just went all into it. And that was about a year ago. 

Sanyam Bhutani  3:59  
Okay. For me, actually, it was it was very funny. And before that, I also want to talk about the Andrew and cause I think. And it's from the interview series, one of the guests actually mentioned, like, if you want to learn from someone who's really famous, and maybe not the best useful techniques out of it, that's the goal is to go for I feel like I really good with that point there, even though like it's, it's great in terms of theory, I think the course is slightly dated, even though like the theory is good. You could, you could learn a lot there, but it might not be the best starting point, I feel.

Rob Bracco  4:31  
Yeah, and to be fair, for everyone who doesn't know the course came out in 2014. So you know, it's a bit dated, and I know Andrew, I haven't seen too much of his newer content, but I know he's working just like Jeremy to put out lots of great content accessible for you.

Sanyam Bhutani  4:48  
But again, I think it's not not the first course I would recommend now of course, it's fast AI by default, but if I do recommend even interval maybe after you know a few things of how to apply the ideas.

Rob Bracco  5:00  
Yeah, I think so I think it's really important. I think one thing that gets lost in academic courses a lot of the time is that they use whatever technology they feel like. And it's not necessarily the technology that's being used by 95% of our industry. So yeah, you know, in fast AI are using Python Pytorch, a lot of the tools that you're going to be using after you leave fast AI. And I feel that if you take a university course, sometimes they'll just say, hey, guys, we use octave, get used to it, and you just stuck. So it's kind of one of the unfortunate things about some of the university courses.

Sanyam Bhutani  5:38  
To to put it out there very bluntly, the professors, most of them who teach these courses have never been a machine learning engineer have never been a data scientist. So they might not be able to teach you the best practices out there even in terms of the toolings theory might might be correct, but again, it wouldn't involve the industry best practices at all.

Rob Bracco  6:01  
Yeah, very possible. And that's something I felt was a major so for to give a little background on myself. Um, I graduated with a CS degree computer science degree about 10 years ago. And I came out into the industry and felt like I had, you know, pretty much no clue I couldn't code well, I didn't feel solid in any language course, I'd learned like the overall theory of programming languages, if I needed to work on a compiler or something. Yeah, I could do some things. But I couldn't use get or GitHub. And I think that that's a major difference between the open source learning community and the university learning community is practical versus theory and both have merits like I there's so much stuff I benefit from because I have a solid foundation computer science, but at the same time, it's really nice to have practical courses that actually allow you to build things.

Sanyam Bhutani  6:55  
I find it kind of interesting. I'm just fresh out of college, but and I read every five minutes, basically. So my one of my most famous tweet says, I did a computer science degree and it did not make me a better coder. And I think the reason why I picked up so much is because people have this notion of someone who's done a CS degree would be by default, a better coder, which I think is completely false.

Rob Bracco  7:20  
Yeah, I would agree with that. And I have some friends right now who are going through CS programs, and I'm looking at the types of stuff they're doing in classes, and it's just making me pull my hair out. So it's one thing I think it comes down to whether the college route is for you, or whether the self teaching route is whether you're able to sit down and actually make it through courses and make consistent progress on your own. I think that for a lot of people going to a university course and having that structure might be a better alternative to doing the first two weeks of six different MOOCs and then dropping them so I think it's all kind of up to the individual which routes better. But I think if you can have discipline, you're motivated, you really can show up every day and be consistent, that the self learning route is so much better for a huge number of reasons.

Sanyam Bhutani  8:13  
Even like people would, it's not there yet. But if I was hiring someone who's paid thousands of dollars to learn something versus someone who's done it for free, by themselves with no financial or explicit pressure on them, I definitely anyone would definitely go for the second person given you have a fair system to assess both of these skills, and they're assuming they're both equally skilled. I'd go for the second person.

Rob Bracco  8:40  
Yeah, me too. 100%. But I don't think we should have illusions about I think there's, you know, some percent of companies out there that are just not going to hire you if you've gone the self teaching route. And for me, like that's a good thing, because I think I would have a culture clash with a place that couldn't look at what my ability is what my accomplishments are and they say no, we want someone else to say you've got this certification. That's just not the environment that I think would be open to a really new concepts and fast change and machine learning. As you know, everything's dated after two years. So it's important to be somewhere on the cutting edge.

Sanyam Bhutani  9:21  
Not even two years, even if you like, fast AI would be a bad example, because they're pretty up to date with cutting edge, but look at how much the course has seen if you've taken two consecutive ones. And I think it's it's true to anything people assume that you're going to learn a lot of theory, which you will, and I'm not sure I haven't seen anywhere where it's being applied. So usually, at least for me, the computer science degree involves a lot of electrical engineering concepts, which is I assume, where the knowledge is derived from for computer science. And I just don't see them being relevant anywhere in the world right now. 

Rob Bracco  9:57  
Yeah. 

Sanyam Bhutani  9:59  
And interestingly enough, I would sincerely follow the programming courses or whatever I enjoyed. But everything else I would pattern match my way into the exams. I just pull out the past year paper's, pattern matched the question, I still managed to get good grades. So I'm not sure if that's a good area, I think what you could do is and what worked okay, for me is like try to supplement your courses, I would enjoy the courses that seem practical. And for everything else, I would just blatantly ignore it and try to compensate my curiosity with online courses. So if you are fortunate or unfortunate to be already enrolled in a degree or in a university, just to complement those ideas. And if you feel this comment is irrelevant, then you're at a really good university.

Rob Bracco  10:49  
Yeah, I'd say that's great advice. I think you have a really unique perspective because you were doing University and online courses concurrently. So you're in a much better position than I am to judge like which is better, which is more relevant, you know, you were in, I mean, you're just finishing up now. And also getting the opportunity to mix in all the latest stuff. So you have a direct comparison. And your conclusion is, it's not going to make you a better coder, you have to get out there and do it on your own.

Sanyam Bhutani  11:15  
If you want to do machine learning, put your money from the degree into hardware, which you're gonna definitely needs at some point or the other.

Rob Bracco  11:24  
So we'll talk about how did you get into self learning what was like the first online course you took? And when did you really kind of take off in that direction?

Sanyam Bhutani  11:33  
I think so. I figured out that the university courses aren't going to be that fun, and I had this perspective of becoming a better coder, which is why I signed up for a CS degree came back a few thousand kilometers to South India just to do that. And in the first month or two, I got completely disappointed just looking at the syllabus. So I decided okay, let me go ahead and join all student clubs because that's where the cool kids would hang out. And that's what I did for a while I tried every single subdivision of computer science again, because they like so many embedded systems. Machine learning came into that picture much later, but they will all of these different dimensions that I experimented with. And at one point so for context, I come from a town and even in India, there wasn't a huge internet boom until recently, a provider came along. So I wasn't used to looking things up on the internet and so to speak, I didn't even have a good internet connection always in my pocket that I could just pull out a smartphone and look things up. And the internet boom happened right around the time I was in university. And at that point, I learned okay, you can look things up on the internet as well. And that's how I discovered I think one of the first courses I don't even remember which one it was might have been on Coursera and I did that is hard I didn't completed I remember that for sure. Fun fact I've never completed Andrew schools. Even Yeah. So I started off in that direction. And only I would mention this as a proud factor here I've done 50 plus online courses. I think it's a bad metric and bad example to say for everyone because that makes me look like hey, I've done 50 courses and look at me, I'm still an idiot. I haven't figured out this pill yet. So that's, that's what I did literally signed up for every single course that I found interesting, until I found fast AI. And even then I continued on that but maybe not as much.

Rob Bracco  13:32  
And did you feel like as you went through that process, you kind of refined your ability to choose classes to know how to retain the content, things like that. And he talked about that a little bit.

Sanyam Bhutani  13:43  
I think. So. Number one thing I realized was, not every course is the best not every course at least online or I would say even for university would have the best teacher and nobody's gonna hold my neck if I don't complete it. Or if I drop out of it. Now in India, we don't have that option for university courses like we can't just drop out of them. But for online courses, you don't have to complete them. And that realization was very relieving that okay, if if I'm not enjoying the course, let me just find another one or let me just find another way of gaining that knowledge.

Rob Bracco  14:21  
And how did you end up holding yourself accountable because I think it's a very fine line between saying this course isn't useful to me. I'm going to move on and making that as a conscious decision and saying, uh, I don't know if I want to keep going with this and kind of talking yourself out of something that is actually beneficial. So how do you make that decision to drop a course and yeah.

Sanyam Bhutani  14:44  
It's it's easy to say in retrospect, I think now now and also now it's it's fairly straightforward for me to figure that out. But I struggled with it. Of course a lot when while I was going through the process while I was very new, and I think I still am but while I was just fresh to the field. I struggled with it a lot. But eventually I started to realize, hey, maybe I spent if I spend 50 to 100 hours or more on trying something and absolutely have no clue of what I'm doing, it's not the best thing for me. And that's, that's totally fine. Maybe maybe fast AI is not the course that you would enjoy that everyone so heavily recommends. And if you've put in the efforts, talk to a few people tried all approaches, maybe it's time to give a find another course. 

Rob Bracco  15:30  
Yeah, definitely. 

Sanyam Bhutani  15:31  
About about accountability. I think this goes back to so I signed up for Udacity schools, which, of course costs cost a lot and i think i think it's it's not necessarily but so there you have a mentor who keeps tracking your progress and you accountable to them. And after I completed it, it wasn't an immediate realization. But after I completed that, and after a few months, I joined the fast AI course where I met Radek on the forums and through his posts of making himself publicly accountable on the forums, I, I realized that okay, this this is a very interesting thing to be accountable in public and really be vulnerable in public so to speak. And I sort of followed his lead his inspiration, the and that's how it started from.

Rob Bracco  16:23  
Nice. Yeah, the public accountability things a really good trick. Another that I found and probably, that come from the background is an online poker player, something that we've done, my friends and I to motivate ourselves is to when you've got something that you know, you're fully capable of sticking to say it's working out three days a week, but you feel like you're probably going to fall off of at some point is essentially telling your friends. [Yep] I don't make these three workouts for the next month. I'll give you $300 you just make up some ridiculous amount. It doesn't matter because if you do it right, you're never going to pay it. It's going to come time you're going to be tired, you're not going to feel like working out. But then you're going to compare that with your second option, which is paying your friend $300. And you're going to go work out. So you can also use that as leverage. I recommend starting out small and not yet. It's been a good trick for me to kind of it's a very similar thing to the public accountability, just giving yourself a worse alternative than skipping out.

Sanyam Bhutani  17:26  
I think you also have a very interesting background and that's I think you mostly self taught you in in in your previous life he did online poker games. So how did you figure out how to remain disciplined throughout the process? And I did not know this, but I just thought you go online, you play and you earn money. But later during our offline conversations, I realized it you have to learn a lot. You have to learn and apply and make money and figure out other things. How did you find that balance?

Rob Bracco  17:56  
Yeah, it was a super beneficial process to me. I think so. Much of what has helped me in the self learning today is directly related to stuff I learned when playing poker, we can talk a lot about it. You know, you have to find a way to have a consistent routine, you have to deal with the fact that you're your own boss, and that any day is potentially a holiday. So you can just take off a tomorrow this week this month, except for the fact that you have to eat. And you know, you have a lot of ups and downs, just like you'll have with coding coding can be very frustrating. So can losing money every day for a week. So you have to generate a kind of work to gain emotional control. So there's so many things I learned from that. Setting my own schedule, all learning from others, and it's especially hard to actually look at learning coding as a blessing because in the world of poker, everyone's more or less competing. So while you can find people to help you out most People don't want to give you great information out there because you're all competing in the same ecosystem. And the second point is, there's so much variance in a game like poker, it's very hard to separate the signal from the noise. So if you have a new technique or strategy you think might be good. What you have to do is go employ that for a month or six weeks, and then check your results and see if you think it's working. And, you know, you could have just been unlucky for that month, or you could have been really lucky. And I've learned a bad strategy, whereas the contrast with the coding community is amazing. Everyone is super willing to help. All the information is just pushed out there. And the informations pretty deterministic you can see very easily whether this thing works or whether it doesn't, whether it's good advice or bad advice. So I think that it's just super refreshing to be in a community of people that are all helping each other and all the good information kind of rises to the top and;

Sanyam Bhutani  19:53  
I think i think how you described approaching the problem is also similar to how you would do research or try things in area for example, you're I know you're working on audio but and I know you're the one of few people who working on it, at least on the fast AI community similar to doing audio research, you have no clue what you're up to. And you might not have any support either people would might or would be helpful, but not really. And things might not work at all, even if you investing efforts.

Rob Bracco  20:24  
Yeah, that's something where I think poker really hone my skills because what it comes down to is, you're going to struggle and bounce around and things are going to be hard both in poker and coding. And all that matters is the process that you go over. You show up every day and you work a set number of hours, you stay focused, you do what seems like the next best thing at the time for coding, and either works or it doesn't. But that's, that's all you can do. And too. I think people in the world of programming don't realize just how much variance there is like some days, you know, you're just going to be unlucky. And you're going to get stuck with some bug and you're going to spend four hours wasting your day you had a plan and an expectation that you're going to make this much progress. And then you're going to get in there and you're going to have some stupid bug, you're going to spend four hours googling. And I think that derails a lot of people. That's really frustrating and hard for a lot of people. I think, especially when people take it personally, and they think that others aren't going to have that same struggle. And that's something I realized kind of recently because I host an open code night here in Kentucky, because I've got a lot of new coders coming in, and the perception from them is that you know, the struggle is going to go away. This is like a beginner thing. And it's like after three months, you just kind of know how to code and you're good. And I'm like nah, nah, every day, every day I'm stuck like occasionally have a great day where everything goes perfect, but you know, most of your time is spent dealing with something difficult and if you even look at the very top people you look It like Jeremy, who's live coding in front of 5000 people, and it's just completely brilliant. And it's been coding for 20 years and knows everything. He's still constantly just making mistakes up there and being like, oh, no, what's that doing and just going back and fixing it. And it's you just got to accept it. And it makes things so much easier when you don't make yourself feel bad about it. It's hard to do, though;

Rob Bracco  22:21  
The other side to it. And I'd like to mention this, at least for the Grand Masters, I think, from which all of us new Kagglers are inspired and also intimidated by so there there are Grand Masters who take one year to become a grandmaster, maybe less. And what people miss out on the fact is, it took them one year of being active on Kaggle to become a Grand Master, but to missing out on all of their life outside of Kaggle, through which all of the experiences that they gathered would have helped them and who knows, like in on whatever walks of life, the skills that they would have, it would have helped them for sure. Maybe maybe they just geniuses, which I think most of them are. But I think the experience is also helpful.

Rob Bracco  23:07  
Yeah, I think it's absolutely all that background experience. And they come in really strong in one area and maybe statistical analysis, or maybe they're just rock solid coders, and the machine learning stuff, they're able to pick up more fluidly because of all of that. So you've got this whole portfolio of skills. I mean, even the soft skills I was just talking about, like, being able to wake up every day and go to your computer for a set amount of time you have I'm not distracted. Those types of skills are things we don't think about that often, but have just as much impact on people becoming grandmasters. And so yeah, you're right, they're ramping up zero to 101 per year, but it's in this subset of the entire portfolio where they already have the rest of the pie complete. [Yep] You know, I don't think you see very often someone coming in who like, doesn't code and doesn't have a heavy science background and a lot of people coming in now. coming in from just that position that push you are just learning to code or they're coming from a different field. And they're reinventing themselves as a machine learning researcher or practitioner.

Sanyam Bhutani  24:13  
And that's that's completely fine. But you need to understand that it might be longer than you would they expect or you might struggle with it with. I think everyone does, like you said.

Rob Bracco  24:24  
So, but the problem is everyone wants to be successful fast, which is okay, but what would you say if you had to advise people and push them in that direction, how to be successful fast? What types of things would you encourage them to do?

Sanyam Bhutani  24:40  
I don't honestly think there's a cheat code to it. And I never said I do set a lot of goals and that helped me set my direction but I don't have a set hard top to reach or a thing to break. For example, even for this year, I publicly said that I want to become a Kaggle Master, which doesn't make new master in any sense, but it's a tier that I'm pretty close to, and I know I can achieve in a year if I stay true to it. And if I'm lazy of course I will not but I don't think there's any shortcut, so to speak, it's it's, it takes a lot of efforts. It takes a lot of discipline sacrifices, just just being able to not hit control tab, command tab if you from a basics background but going to YouTube watching songs watching funny stand up, whatever drives your mind, because that's of course more Enter. And and people are passionate, that's how you want to do those things. But it's it's also easy to get distracted. Bradley calls it the curse of control plus the i think i think in one of his blog posts.

Rob Bracco  25:50  
Yeah, that's, that's a good way to label it. So do you have any advice for avoiding that, like, what's your day like and how do you stay? How do you structure it and how do you stay focussed?

Sanyam Bhutani  26:01  
So I don't micro set goals. Sometimes I do when when it's absolutely required when I have a hard deadline, for example, at work or otherwise, or in my previous life where I was doing a lot of consulting, I usually structured it around my curiosity, I lead the curiosity rivalry, around whatever things I have hard scheduled on my calendar. So that's, that's one way and then there are those macro goals, which I always look at every day. And they also pinned at the top of my profiles everywhere so that even if anyone comes to it, they know that this guy's an idiot, he hasn't completed them. So that's, that's always in the back of my head. And I also have them open in a new tab or somewhere. So just looking at those. Okay, I haven't done anything related to Kaggle in a while, should I go to Kaggle. And I personally feel like because I am juggling a lot of things together the podcast and other stuff blogging, which I haven't done anything for and I want to write 52 blog posts this year. So maybe I should now and just being able to juggle between those things, and I don't get burnt out because of that either. Again, I don't have good balance, I think across them, but I have a structured day to day. I do wake up early. And I do open my laptop right up. So I don't have a life outside of this, so to speak. But beyond that, beyond that it's completely curiosity driven.

Rob Bracco  27:31  
And going because we have pretty different practices, I'd say. So how do you avoid burnout because for me, I have like a very structured, almost micro set and I started a certain time and I let go of work at a certain time and I'm very much of the belief that I need to like, close it, try not to think about it until I come back the next day. And I try and build with that just consistency. I put in a set amount of time, five days a week and I want to be able to do that for the next 10 years but knowing myself If I start letting myself jump into a competition, say at 6pm or a, you know, checking work related stuff, I'll burn out but you seem to manage it and continue to be pretty consistent without those practices. So he talked about how you avoid burnout.

Sanyam Bhutani  28:15  
I do think I keep getting burnt out I was there the other day. And then I do don't do anything for a day and I literally have nothing to do so I kept keep coming back to it. But I feel like that's that's one thing that I really struggle with. This week. I hardest screen time of close to 20 hours every day because I am doing a lot of interviews just this week. And that's that's just ridiculous. I, I don't think I'd recommend that to anyone. For me, these are the things that I truly enjoy. And I think it's it's not a good thing, but the lines blur between my personal interests, my work interests, and things I'd like to do in the free time and that that creates this chaotic balance. I have to strive for so one thing, one thing that I now enjoy is booking a fixed amount of hours in my calendar to go to the gym. And like half time of this screen, which has helped me like getting back to the screen also in some different ways, but I think I do keep struggling with burnout every now and then.

Rob Bracco  29:21  
Interesting. Well, I do think we, we agree on the part about keeping those things, those macro goals in front of you the things that are important to you the things that you want, from having led this Local Code group, I've kind of noticed, that is like the number one thing new people can do. To keep on track is have some underlying goal project, anything that's really driving you a passion. I see almost a 100% correlation that people who are having trouble like oh, I'm learning Python, but you know, I started the course and then I dropped it and say, well, what do you want to do with it, and then [Yes] answer. And then on the other hand, I'll have some people like I've got a 12 year old kid in the class who's coming in and building games and Python. And every week, he's just super excited about it. He wants to add new features. And that's what's driving the discovery of the next new thing that he needs to learn, oh, I want to learn how to add a second character. And the coding just follows naturally. So I think having something that drives you is like the number one thing, push with it can do. And if you, you know, if you're listening to this right now, and you're saying, I don't really know what that is, for me, like, take some time, go sit down with a cup of coffee, no screen, a notebook, and just try and figure out why you're doing this. If this is even the right path for you, it might not be but look for those reasons, compile them and do what Sanyam does, and then put them in front of you to remind yourself every day until it's just internalized because I think that's a huge difference between people who are consistent successful, like you said, You wake up wanting to do it. This is where you it's not, I have to, you know, force myself and I feel the exact same way. Like I really like coding building stuff. I like the whole process of it learning, I enjoy all of it. So it's really easy for me even. I don't know why burnout. If that's the case, I do find that I don't want people to think that come in and view work as work because I really do enjoy it. Um, I think that's something that can be learned in practice, too. I think like noticing when you're getting frustrated and letting go of it. All these things. These are like kind of the meta skills that are behind. You know, everyone's focused on learning Python, pandas, those things, but I think there are a lot of soft skills that go into it. So maybe have you found anything that you've learned or whether it's something like a mental set or whether it's something like soft skill, like keyboard shortcuts that have just made your life a lot easier, and you're really glad that you want them;

Sanyam Bhutani  32:01  
In terms of, generally speaking, or;

Rob Bracco  32:05  
Uh, in terms of like, your life is now easier as a coder. So, like one example I gave was just learning keyboard shortcuts instead of like trying to do everything with the mouse, uh, you know, that pays dividends throughout your entire day, no matter what you're doing, whether you're doing pandas or pi torch or Python or JavaScript, your life is just going to be easier. And it's like, it's almost like that the top of the pyramid because it just helps all those other things. [Yeah] Kind of same with exercise, as you were saying, like that time away from the screen, where you go and just let your body reset probably really helps the other 18 hours a day where you're just killing yourself. [Yeah] If you can talk about like any things that you've been, you've kind of learned and then been like, oh, I didn't I learned this two years ago.

Sanyam Bhutani  32:56  
I promise myself too. And I think it's similar. How you just throw the instructions of the box. But I promised myself and I keep myself accountable to search the documentation for 10 minutes before I Google, and then Google for at least 20 minutes before I go to posting any questions or asking anyone, and usually somewhere between five to 25 minutes in those five to 25 minutes, I'm able to find mine. So depending on how sleep deprived I am, I think that's, that's the best thing that's helping me right now. And secondly, I think I used to be really fancy about, maybe I should try a new editor, maybe I should try something new. And now just trying to go with whatever I'm used to, which for now is Jupiter because I come from a fast table, and just trying not to be very fancy about it. But just learning only absolutely as much as I need to if I don't need to know a shortcut. I'm not sure it's the best approach. I don't go out and learn new shortcuts, just stick with it and stick to whatever I want. Out of the notebook rather than trying to figure out more fancy things around it. And the reason I say that is because there's a fine balance to it, you should know a few things. But that's not your primary goal. Those are supposed to help you and you shouldn't just spend time on learning how to use Jupiter notebook. It's supposed to help you and not eat away your time. I think those those two things are my primary ones.

Rob Bracco  34:24  
It's interesting, I think, I agree on some points and disagree on others. I think there's one thing that really helped me with consistency and like, you know, not being overwhelmed with the infinite amount of stuff that you just have to learn as a data science machine learning person, you know, if I took the viewpoint, how would I order it and what would I do if I was going to be doing this every day for the next 10 years? Because that's what I plan to do. Um, so, you know, certain things may seem like diversions and they can be for people just getting started, but for instance, like you said Jupyter and mastering the stuff that it has to offer, you know, say that takes you four to six hours of your time. And you're going to spend 1000 hours in Jupiter over the next five years. I think the tipping point for me is whether it's going to be a net time savings. So if I if my Jupyter is going to be 5% more productive, I'm saving 50 hours, therefore it's worth it for me to invest that time. That being said, you kind of have to not just try and learn everything in the beginning you have to, you know, maybe do something like devote 15% of your time or 10% of your time to making things smoother and more efficient. Getting better software, and then the 85% with the stuff that really interests you and that is your kind of core day to day.

Sanyam Bhutani  35:52  
I would agree on that. And I think it's also similar for me right now I am exploring the widgets and that's that these are things that I switch to when I'm bored of something. So I think it's useful, like you said, to keep 10 15% of your time for just exploring things outside of it. And I was inspired by this through Jeremy, who I think sets aside a lot of his time of every single day to learn new things. So maybe you don't have that much time. But I'm pretty sure everyone could set aside half an hour to one hour of their day, out of the family time, standard job, whatever to learn something new to Kaggle. And that definitely compounds. I don't think we have to even debate that if you keep setting aside that fixed amount of hours.

Rob Bracco  36:39  
So that being said, how do you choose what to do next? Like how do you choose how to spend that hour? Do you have that conscious process or;

Sanyam Bhutani  36:48  
So I usually have an I used to be very fancy about the apps that I would use now just use apples notes because I have all the Apple devices so if you can meet Is that I can pull out my iPad or iPhone, and I'd have it on there. And I usually have a list of different things that I want to explore frameworks, competitions, blog posts that I'm yet to read, research papers that I'm yet to read books that I've yet to read courses that I've yet to explore. And so and I have those titles labeled across the notes for anyone who's ever used an Apple device. I just scroll through that. And whatever I enjoy, because these are things I'm doing out of enjoyment and for the learning part, just just set aside time for that. I click on it, whatever's in that list that excites me at that point of time. Just click on it, start reading, start exploring start coding around it. Again, it's it's unstructured, but completely curiosity driven. And that that helps me avoid burnout. I think in in that case.

Rob Bracco  37:54  
Yeah, I could see that we have similar I have a slightly different I kind of try and look for like the optimal Which I don't know if that is itself is optimal, but I look at it like, what's the next best thing I could learn? What would bring me the most gain for the least amount of time that I can do right now. Um, which brings me to another point, like a really good thing that stuck in my head recently is what to do when you don't know what to learn next. Yeah, go ahead.

Sanyam Bhutani  38:29  
So I always have a backlog of ideas now, because if you are active on Twitter, and if you follow enough people from the machine learning world, you will have an overflow of ideas, obviously. And you can yourself filter them out, you will, of course, use them to filter out the complete overflow of the field. But if you follow the right people, you, I'm assuming have the right knowledge at your disposal. And I just keep setting tabs on them to the nodes that I just talked about. And that leaves me with enough options. To explore, or just scrolling to read it every day just scrolling through the fast AI forums every day, there's plenty of ideas out there that I personally, I don't think I have the time to explore. So I find myself always at a backlog of ideas.

Rob Bracco  39:16  
And what would you say you do, because this is a, you've talked a lot about the infinite learning loop and seeing all these things and just jumping in and learning stuff that you might not necessarily need right now. And you also might not necessarily need to ever it might be kind of cool new thing, a new framework. So how do you avoid that kind of loop of just jumping into things that you actually might not need? Or you're not sure about?

Sanyam Bhutani  39:42  
I think I think I have a higher BS filter for now of things I want to avoid. So if if I'm into a course, I'd usually skip the introductory parts because for every machine learning goes out the first five chapters are always the same. Those three annoying a minute ones that you get and followed by some back propagation before they get to the meat, and usually right now, I'm not taking a lot of courses, but I'd usually skip that and get right to the lecture that I need to know. So just having the comfort in my mind of, I can take the most important lecture right away. And if I don't understand anything, then I'll go back. Which again, leaves you in a loop, but maybe not the infinite learning loop, which I keep talking about, because I think many people need to know it. I keep seeing people falling into it.

Rob Bracco  40:31  
Yeah, it's definitely a real phenomenon.

Sanyam Bhutani  40:35  
Do you find yourself falling into that loop? Or how do you avoid it? How has your learning approach been?

Rob Bracco  40:43  
Uh, I would say I avoid it. I constantly have the temptation of like, I should go do this. There's this awesome course or opportunity or thing that would make me feel better if I did it. And I think that's something you really have to watch out for as a practitioner. is if you're a productive person. I think that for most productive people, that's a really subtle form of procrastination, doing a thing. It's not the most important, but the thing that you know you'll be successful at, it won't be that hard, you'll go do it, you'll feel like you accomplished something. But it's not the absolute most important thing you could be doing at this moment. So being really honest with yourself, and the way I avoid it is actually through some rituals and practices I have. So I do a weekly reflection, where I just set aside a block of time on Sunday to try and look every week I do it and look at how the past week went, what stuff I intended. Like, what did I say last Sunday I was going to do this week. Did I do it? How did it go? What did I learn? What do I want to do for the week going forward? I can go a bit more into detail into that process later. But the point is that that it's easy to kind of delude myself in the moment when I'm opening a browser doing something I didn't plan to do and going and trying a new course or something like that, that just kind of popped up in my screen. But when I sit down and just really focus and look at what I wrote the week before and look at what I'm doing now, it's really hard for me to delude myself, and to not see what truly is the important thing. So I think having that process for planning and reflection is just one of the most important things to me, is super beneficial. I think that that's part of a larger cycle I wanted to talk about of kind of how I have found my way through this totally crazy situation. We're all in the trying to figure out what to do next and how to make your own path. When you know, you can't see where you're going to be a year from now. You can't see where you're going to be six months from now. So how do you decide and the process I've fallen upon is basically looking around trying to find the next best move or what looks like the next best move, jump and do that for a week or two weeks make, you know, just short term commitments. And then the reflection step, which is look back, you know, from my new vantage point, what should I do next, and then adjust your strategy. And if you just repeat that cycle over and over and kind of iterate through it, you will just find success, I think fairly quickly. I think a lot of people tend to lack that reflect and adjust step. So they'll say you're trying to gain control of your physical health and you want to start exercising. You know, most people take the first step, they you know, once or twice a year, they come up with a plan. They say I'm going to go to the gym this time is going to be different. I'm going to run five miles every day, and they come with their plan and they do it and they go and the first two or three days or two or three weeks, they are successful at it but eventually at some point, things break down. Maybe they have a family emergency Or maybe their bodies too sore to go back in the gym. They didn't account for something. And they consider that a failure because they fall off and they stopped doing it. Yeah. That's not failure. That is the point where you just say, oh, well, the initial plan I had didn't work, how can I adjust it? and try again going forward? And if immediately at that point, they say, oh, I guess I'm really sore, maybe I should be doing less and focusing on consistency and then they try that and maybe two weeks later, they realize I'm not losing any weight I need to update and you just go through that cycle. And you'll find your way doing that.

Sanyam Bhutani  44:35  
I think and you you've been recently engaged so you might relate to this better but I call it since you in love with the process. What do you do after the honeymoon period runs out? You need to keep the marriage strong. How do you continue doing that? How do you continue to you valuating that process and it's it's a process it's it like you said it said iterate a process, you constantly need to work towards it. It's not about hunky dory situation.

Rob Bracco  45:03  
Yeah, I think I'm staying in touch with your original motivation, both in relationships for romantic advice like staying focused on. It's very easy over time, the honeymoon period ends because you stop focusing on the amazing things about the person because your brain is very good at filtering out what it already knows. [Yep] And it starts focusing on the things, maybe the 2% of things you don't like in the relationship. If you can keep your focus on the 98%, then you're going to be fine. You're going to be grateful, you're going to be really happy about the situation you're in, you're going to realize how lucky you are. But with the and the same applies for coding, if you're allowing yourself to get frustrated, derailed, if you're overworking and you're not spending time really looking at your progress, how far you've come and I think that's a really common illusion. I caught myself doing that the planning helped with that. That reflection, one of the things I do is go through and actually list out what I accomplished that week. And I think it's a really easy, especially when you're really kind of hard on yourself and trying to do your best and be good fast. You don't notice all the stuff all the progress you are making, unless you explicitly kind of write it out, because I've had a lot of weeks where I was like, wow, that was I just threw that week in the trash. I just didn't do what I plan to do. [Yeah] I really failed this week. And I go through that process and I start writing down what actually did I'm like, Oh my god, I actually have like eight things on this list that are, you know, fairly substantial. So I think taking time to each week to celebrate the things you have done, that just rejuvenate you and keeping in touch, like we said with the things that drive you why you're doing it, those two, celebrating progress, and then keeping in touch with your underlying reasons. Those are the two I think that will keep you from I guess leaving the honeymoon period.

Sanyam Bhutani  47:00  
For the record also if you're just starting out that list could be completely blank because again you're trying to find things that you you could be better at or you're just new to the field you need to understand that and things you would have accomplished compound over time it's it's it's not a linear process for sure. And initially you'll struggle a lot that's why not everyone is a data scientist even if they want to be that's why it takes so much efforts to become a Kaggle Grand Master even though every single person out of the 3 million I think that have signed up on Kaggle eventually might want to become a grandmaster. And you just need to acknowledge embrace the process I think.

Rob Bracco  47:41  
Yeah, I think embrace the process is the number one I do want to clarify my accomplishments on this list. My eight accomplishments for the week are not like these grand, you know, I got a gold medal in the kaggle competition. A lot of them are like, you know, I finished two lectures in this course. I learned how to use a new framework or I tried, I made progress on this blog piece, and then personal stuff too, you know, I help my mom like get her house in order. I went to the gym three times this week and just, you know anything, you're going to have accomplishments at every level, that's one of the best things about being a beginner is you have like all that low hanging fruit you just get to grab it's a really fun time you make progress much faster than you do once you have spent a few years and and there's kind of more marginal gains to be made. So I think that  it's really fun being a beginner, and people should just really like the fact that you're going to progress faster than will be possible in two years and kind of embrace the process. That's the best way to put it.

Sanyam Bhutani  48:43  
I'm curious how do you avoid burnout in those micro I know you do micro setting of goals, but how do you avoid burnout where you miss the goals I constantly get irritated by that fact is the music you found that helps you

Rob Bracco  48:58  
So I don't set I don't set non process related goals generally. And if I do, I try and not attached to them. So if I say, I want to have this thing done by this date, I look more on the inputs like what's it going to take to do that? I'm going to have to work from 8am to 12pm. At 12pm, four hours, not 16 there. With heavy focus, I'm not going to allow myself to get distracted. And if I show up and do that, and I don't reach my goal, I don't get upset like, problem wasn't that I failed to reach my goal that was that I failed to set a good goal. If I showed up and did every step in the process and I didn't meet my goal, then that's not me failing at the goal. That's me failing. It's setting it up. But yeah, like I said, focus on the process. And be really compassionate with yourself. That's something I had to work on a lot as someone who used to try and make all these big changes in my life and Inevitably you have these setbacks and failures. And I thought at the time that, you know, it's good to be hard on yourself, because if you're not hard on yourself, you're not going to change. And what I actually think to be true now is that if you're really hard with yourself, and you kind of beat yourself up, you're going to avoid the path entirely. You're not going to want to reflect you're going to associate trying and failing with pain. And so what's going to happen is, you're not going to look back and try and adjust, you're going to let it go for four months, and then you're going to try and jump back in, and you're going to repeat that process. So I think, again, celebrating like small victories, things like that, and just accepting. Really, it's not, we're talking about all this struggle and day to day and the problems like when you're trying to debug something, you're stuck on it for four hours. That's just part of the process. There's no way around it. And if you accept it, it ceases to be struggling. There's not pain, if you're just like, this is okay. You just go with it, then you take away a lot of that cost and a lot of that burden on yourself. So I think there's a lot of control that you can have but through not beating yourself up and a self care you know, if you really do feel yourself starting to get frustrated, get up and go to the gym or go for a walk or go play with your dog.

Sanyam Bhutani  51:22  
And I know you're a huge propeller of this also. So I think you made an explicit decision about a year ago, after you read the book the book by I forget the author, but did you find that useful to just focus on the problem for a few hours and not do anything not get tempted into opening up your laptop back after it? Did that help you? Or do you still find yourself struggling with that?

Rob Bracco  51:47  
Both. I think it's I know it on an absolute intellectual level of the best way for me to work is to get up a set time each day. Get up at seven I have a routine I go through in the Morning to kind of get myself ready. That's because every day when you roll out of bed, it's just a complete roll of the dice how you're gonna feel, you know, one day you're gonna wake up feeling extra tired one day, you're gonna wake up feeling good. And I needed a way to be able to show up by my computer at eight o'clock and be focused. And I found that having like a short routine, and whatever it is, it's going to be different for different people to kind of, if I do wake up really tired, too, by the time I get to my computer be feeling pretty good and ready to go. Um, but that's an aside back to the deep work. Yeah, I'm pretty structured in my day. So what I actually do is usually get to work about eight o'clock. I set 25 minute timers on my phone, where I just have absolutely no distraction, all notifications turned off. And I just work intensely on a goal for 25 minutes and that take a five minute break. That duration, there's nothing important about it. You can do 15 minutes So you can do five minutes. But the point is, I work in this kind of intense cycle trying to do the most I possibly can. And I do that for about four to six hours. And then after that I'm just completely done. And I've experimented with both ways, the four to six hours away where I'm really focused. I personally, I don't think anyone really can maintain that level of focus for 10 to 12 hours. So what ends up happening is if I end up working 10 to 12 hours and kind of letting things go, I'm just doing it at about 50% efficiency, and I'm really not getting any more done. Then plus the fact that I end up getting burnt out. It's just a net negative for me. So it's kind of hard to believe but for me personally, limiting my work days and again, this is not like my entire work day, but it means my my core most important things my knowledge work, like so if I'm working on a audio machine learning framework, like something's really challenging, just putting all my energy right there. I'm doing that in four to five hours, I get as much done as I feel. I would if I spent 10 hours a kind of half efficiency, and there's no there's no alternative. I don't feel that 10 hours of just super focused, at least not for me and my, my experience would work. So yeah, I really advise people to experiment with that and consider all of these things as variables in yourself learning process that you can play with and try out. Focus is a muscle, it's something you build up. It's, it's not something that you know, you're just born with or aren't. So I think trying to find ways to practice it really help out do you have any advice on like staying focused, avoiding distractions, tips and tricks?

Sanyam Bhutani  54:47  
I don't think I have a good advice on it because I was just thinking of it as you were talking about it. But for me, the struggle point is honestly speaking, I don't have a life outside of all of these things. I do that are already publicly visible. And I know you're familiar with all of them. So I find it really hard to draw the line, for example, this podcast, I'm really enjoying it. It's not work for me, so to speak, editing, because well, for sure, I absolutely don't like that process a lot. But not being able to draw the line sort of makes it really hard for me to do the deep work because I don't know what we'll do is the enjoyment part and where's the work part both overlap more than 70%? For me, for distraction, I think, again, the goal setting when it comes into the picture, for example, for our podcast, and for every podcast that I do, I try to jot down the ideas. And usually my goal is to like have them ready much before the call. And that's that that becomes a goal in itself. So just knowing that and whatever my schedule would be, I try to get that done in three or four hours. So again, those hours so to speak, become work right because now I'm on the line I'm going to be on fire if I don't complete that. And I think that that's where I find the and we joke about it at least in Indian means that the engineer attitude, the procrastinating coder attitude where you don't do it until you absolutely need to. And that really pushes you to a lot of efficiency so to speak, because when you do every single minute counts, then you really try to put in all of your efforts I think. Not sure if that's the best process because that also brings a lot of stressing but procrastinating until I absolutely need to do something helps for me in a really gunny way.

Rob Bracco  56:41  
Yeah, that's an interesting, I hadn't thought of it in that light that I'm to some extent doing that by compressing the time. Um, but at the same time, it's really interesting from your perspective, like you're doing so many different things you're like, absolutely prolific with blogs with the podcast and All the different stuff you're working on. Do you think that having that pressure is kind of a key to your success? It's like, do you think that you'd be able to do just one or two of them? Or do you think that having all of that combined and having that kind of constant pressure of a deadline is what makes you able to do what you do?

Sanyam Bhutani  57:22  
I think you're being too kind. I I still struggle with doing a good job at these very honestly speaking. And I could point out to public instances also that do justify this, for example, the interview that I did with Jeremy I didn't correct the thumbnail. And that was the I think 52nd interview that I did. So I am not good at this thing, even though I do it almost full time. But again, I think, yeah, the deadline setting fashion where I've publicly promised to deliver two podcast episodes every week, creates a deadline, right? And I also have to find people to make So that I'm able to continue running it, I need to do all of the process. And again, it's it's curiosity driven, but it's also deadline driven. So if I am almost brain dead, and I'm almost very sleepy, I go down to doing this subtitle, which also I do now. And that's not very involving for me. Or I'd edit unfinished or wrap up something for example, again. So that's where the curiosity comes in. And that's also where the deadlines come in for me because I deliver the episodes every Thursday and Sunday 9am pt no matter what. So I know if I keep procrastinating and if I'm not in the mood, if I get to it by 830 pt, I need to complete it in a half an hour, which has also happened many times even despite the fact that I would have already recorded the episode one month ago and I've been procrastinating so much that those 30 minutes I really squeeze out my efficiency. Listen to the episode at five expeed fix the subtitles make sure it goes out at 9am.

Rob Bracco  59:05  
And so I got two questions. First, what are you doing from seven to 830 there? Are you just are you working on something else or you like probably on YouTube kind of procrastinating in that way? are you hanging out with friends? Like what's the hour and a half leading up to that?

Sanyam Bhutani  59:25  
Psst all of those I think. So I might be reading a blog post and continuously looking at the time getting says the auto gave 30 minutes to go 20 minutes to go 10 minutes to go. And I keep scrolling while monitoring the time or I'm watching a video that we go about watch another one, then do it. It's It's It's not something smart that I do is this thing that I'm enjoying and if I don't like a process, I'll keep pushing it forward until I absolutely need to. For example, the subtitling it's it's not the most enjoyable part when it's necessary for me to be able to, have it for the non native English speakers, which is a large number now for the podcast? So, yeah, it's it's been in that sense.

Rob Bracco  1:00:12  
I was also wondering, do you think that you could set an artificial deadline that wasn't like a true life deadline? Like you could mentally say, I'm gonna have it done a week in advance, but it has to be done by this time? 

Sanyam Bhutani  1:00:26  
I don't think so. Honestly speaking, I don't think so at all because again, it's so many things. For me the the real deadline is what makes sense. And I don't think any artificial deadline would matter, because I know that it's an artificial deadline. And I again go back to my roots, which is being very lazy, which is being a big time procrastinator of it. So I don't do that. I know that I need to put out the episode and I would have the episode in mind, for example, and I think the podcast is good, a good example. So that's why I'm nagging on it, but So whenever I find the mood or the headspace to be able to do it I just completed then in there which could be a week ago or which could be 10 minutes ago, where is a lot?

Rob Bracco  1:01:11  
Right. But then if it does come up on the deadline, you find the headspace and you, you get in that zone because you have to.

Sanyam Bhutani  1:01:17  
Then I have to and I think I picked this up while freelancing in college and college was a really frustrating moment for me because I did not enjoy the syllabus for a large part. And I was also working working for clients who ideal deadlines and contract signed enough to send me off to prison. Worst case scenario, although that sounds realistic. And if I'm really frustrated throughout my day, I wouldn't be able to code for sure. And if I have a deadline next day, I need to wake up to work up until 9am. not advisable, don't take I'm not encouraging it. But that's what I would have to do if I need to make that money. If I need to keep that client happy, so to speak. So that's what I would do. And that's that's the thing that I think I just continued for me since.

Rob Bracco  1:02:11  
Yeah it is impressive. Do you think, so how old are you?

Sanyam Bhutani  1:02:17  
I will be 23 this year.

Rob Bracco  1:02:20  
That's incredible that you've done, what you've done, you're turning 23. I'll be 33 this year. So I think maybe that's part of what the contrasting outlook is. I remember in college like the same thing, just you know, if you have to get three hours sleep, get three hours sleep. And it's a different world for me now. So I think that'll be good to have that contrast, because we'll probably have listeners in there. And then listeners in the 30s and upwards.

Sanyam Bhutani  1:02:46  
And for the record, I don't have a life outside of this. I don't socialize as much. Not that I get the chances to a note that I preferred to I'd always default to doing something stupid on the internet or otherwise. So all of my time, active time, waking hours are spent on things around the things that I'm doing. And most of them are publicly visible. So to put things into perspective, I don't have a family that I need to take care of. I don't have other responsibilities that I need to take care of. I can pay rent by default, so I don't have to worry about that every single day. And that that gives me the headspace to do all of these stupid things that I'm able to do right now.

Rob Bracco  1:03:28  
Yeah, I think that's an incredible I'm in the same situation that I've got the freedom to focus on this stuff. You know, I don't have kids and I think that gives a lot of openness to the pursuit of this and it's a reason that I've been able to progress fairly fast. Um, do you have any advice or do you know any people who come from a different background who are going through a programming a self teaching who might have kids might have a job in another field where they're not able to practice. Do you know anyone along those lines I think would be great to give some advice, but I don't think you know, we're necessarily the people to do it.

Sanyam Bhutani  1:04:11  
So I'm definitely the bag. But I think Radek from fast AI is the best example for it. And he's a hero to the complete community. And I'll have him on the show soon. So audience do check out that episode whenever it comes out. But he's already the man of the family. And he jumped onto the machine learning boat after already being in the family situation, and he'd already constantly talk about it, where he'd be learning stuff on his phone while playing with his baby. And this is something I know it's already there out in the public. So even for him, I think, and he's already mentioned, it's it does involve a lot of burnout and I think it's part of a process where you're really trying to get good at something not out of the absolute need of it, but because you're so passionate about it. And I think it's always hard to find the violence for such situations. But Radek is the best example that I can think of.

Rob Bracco  1:05:15  
Nice. I think that'll be good to have him on and get that kind of contrast. And I think that's a huge thing that we haven't talked about is mentoring, or even just finding people who are kind of match your background and circumstances. [Yeah] And how they did it, and trying to find someone to kind of model after, did you have anyone when you were starting out who you looked at and said, I want to be like that, or I want to do what they did.

Sanyam Bhutani  1:05:48  
Not when I started of for sure. I would always seek advice a lot at college from my professors who again, had no clue about deep learning. Actually, the reason I got into deep learning was because they told me it's a project for people doing a PhD and you won't be able to do it. I was like, okay, I'm going to do this. Let's see. And that's what made me sign up for all of the online courses that I did. So maybe the rebel out of the group. But after after I went to the online forums, and I learned how to ask respectfully from people that that's when I figured out okay, all of these amazing people from the community can be very helpful. But I know you had many mentors. So I think there's an interesting story there also from your end.

Rob Bracco  1:06:33  
Yeah, no, I've had I feel like I've had like, just been mentored by the community in general. You know, I've had some people really reached out and helped me like I mentioned, Harry bloom, baz on the forums, he's just like, I get stuck, I go to him. He just helps me with all kinds of stuff. And it's made my path a lot smoother and a lot easier. But aside from that, I've really just tried to look out at people who have done exactly what you've done, which is to walk the path, and then to write about it. And then listening to those people, you know, for instance, you wrote how not to do fast AI. And I read that before I took fast I but all these are things I, I'm going to listen to this advice from this person who's in a similar circumstance and who just took the class. And I think that's a really important part of self teaching, too, is just not making avoidable mistakes by learning from others who have done stuff. Because you'll just shorten your time down that it takes to go through the process. If you learn it's really cool, because this whole community is building each year. There's a fast AI, there's a new group of people who have access to the past generations resources, and who take that and write about it. And so we just keep getting better and better guides more and more concise, and it's slowly evolving, and it's just really cool. I think at a certain point, we might even have like almost a singular resource for each thing where we can say, here's the best thing to go learn Jupyter. Here's the best thing for Pandas. Because right now, I don't know how you feel. But I feel like I just kind of scramble around and find stuff. And it's really hard when you're a beginner to know what a good resource is, and what isn't. Because you don't have the knowledge that you're trying to judge. So it really takes someone having walked through the path and looking back and saying, this will help you for where you're at. And, you know, Jeremy talks a lot about that Jeremy and Rachel saying, you know, you can add a ton of value, even if you're a beginner just by writing and explaining concepts to yourself three months ago, six months ago, because, you know, someone who's been familiar with these concepts for five years isn't going to be able to explain them as well to someone who is just starting out because once you internalize the concept, you lose the perspective of why it was difficult in the first place. So I think this is something that I've really slacked on I my intention, when I read your blog was, I'm going to do fast day I'm going to commit to it, I'm going to write about it. And I've written almost nothing. So that's like my major regret from the past year. But I would encourage other people not to make the same mistake and jump in. And do you know, the types of stuff that you've done?

Sanyam Bhutani  1:09:22  
I think, not to, not to trash anyone. But that's where people mess up. You mentioned about writing about concepts. Most people find something interesting. And they try to write it because it's trending, just because you might get more views, which makes sense, but that's not what fasting really said this what they talk about is, okay, you went through the pain of understanding how the API had been created. And if you want to maybe talk about it, now that you slightly know how it works, go ahead and write it down. See how that refines your thoughts. And that's what they're really aiming for. Not that okay, maybe this is trending in today's we situation, let me try and write about that just to get more taxing. Again, it depends on your end goal. If if you're there to learn you might benefit from the other approach better than if you did just to build an audience.

Rob Bracco  1:10:18  
Yeah, I agree. 100% I think you need to focus on what's most important to you and what will be most important to others, not just what's trending at the moment. And if you do that, you'll build an audience organically. If you can provide value to people, people will come to you and they'll send people to you. It's there's nothing wrong with it being a natural process. Whereas if you try and jump on what's trending and you're constantly doing that, you won't really be adding value. And you'll get a lot of views initially, but you won't get a lot of people who are kind of loyal subscribers who just check out your all of your content.

Sanyam Bhutani  1:10:55  
You just you just be good news channel. Like I might flip through if it becomes boring at any point was. So if you're scrolling through your TV and you keep finding, if you're going through the news channels and you get bored, often you just move on to the other one where you can find more information you sort of become that flow of information in the other situation.

Rob Bracco  1:11:17  
Yeah, definitely. And there's also the kind of clogs The, the pipes of bit so that it's hard for people to find the truly helpful resources. So just keeping that in mind. Like it's okay to write about popular topics and to try and build an audience but doing so just I would advise people, um, or suggest because I have no actual experience or background, maybe you can talk on this a little bit more, but just add value and try and add value and good things will come your way. And that's something I've always felt to be true about you from having talked to you and all of our private conversations. From even when I was very first starting out, your attitude was always how can I help It was maybe I can connect you with this person. If you do that, let me know. And I will help you share it with people. And you were always just focused on adding value. And I think that's one of the reasons you have been as successful as you have been, is because you weren't trying specifically just to get clicks.

Sanyam Bhutani  1:12:19  
I think again, again, you being too kind, but what I tried to do was pass on the attitude that I received from the forums even from Jeremy and Rachel and Sylvain themselves. So everyone that goes onto the forums is treated as a potential voiceless, future deep learning practitioner and never treated as a student, even though we get that title by default. And there's a fine difference. If you're talking to a student, you'll have a different attitude versus if you're looking at a world class practitioner, and if you treat everyone with that respect, and this is the attitude that I received from the core people, the family the first a family that I like to call I feel a responsibility to continue for putting that forward to everyone that I meet on the forums or anyone that reaches out to me. So I'm just trying my best to do that with even the podcast now that I get to broadcast it, so to speak, or even even at a personal level if if I get the chance, but I think this is one fine way to it also, and I know you've mastered it of how to respectfully ask for advice online, not just this two things to it. And you could you could be annoying to an extent and you could be very respectful. How did you find that balance?

Rob Bracco  1:13:41  
Yeah, it might have been you who actually pointed it out to me Initially, the the concept we're talking about is when you are, you know, it's totally fine to ask for help and it's there are so many people willing to help, but the one responsibility you have someone asking for help is to make sure that Help is actually needed in the first place. And what I mean by that is, you know, all the people mentoring and helping on the forums have a limited amount of time. And so if you can, if your problem you haven't worked on it a little bit, or at least googled it, you know, if it's solvable by a Google search, it's not a, I wouldn't recommend asking your mentor about it. That's the responsibility of a mentee is to take the time the mentor is there to help you avoid banging your head against the wall for hours for a bug that they've already seen in the past or they know how to solve, but at the same time, they're not there. They're not Google, they're not there to save you from finding information that should be easily accessible. So I think just stopping before reaching out to people and I fail at this all the time. Harry can attest to that. I'll send him messages on telegram I'll just be like, how do you do this and get and then I just realized that's literally I can just type that into Google and it'll pop up StackOverflow seven, Thousand up votes, the lines right there. And so I just delete the message and was like sorry. So it'll have been it's not it's not a big deal. Like if someone asks me that type of question, it's going to happen from time to time, it's not a big deal at all. But try to avoid it being a pattern of try and use the amount of time people are sharing with you as if it were a precious resource.

Sanyam Bhutani  1:15:22  
I think I think the two sides to it so for example, and we've tried to work on things together. So when someone goes out and explicitly agrees to help you then you can ask for advice at a micro level also. Or if you're going to go ahead and post macro level questions. You need to show that you've done the homework and it's completely fine that you've done a few Google searches and you don't understand what that jibberish contextualized short acronyms mean, just tell is that, hey, I looked this up. I found this. I did not understand this. Could you help me and maybe the person so what do you need to take away from there? How do you learn how to learn yourself rather than always coming back to asking other people? Because if if it gets annoying, knowing for sure is going to help you.

Rob Bracco  1:16:11  
Yeah, that's a really good clarification that  it is okay to ask for help in those circumstances, but just try and make it as concise as possible. I'm show you know, errors are relevant code stacktrace. It's, it's really annoying. I see on the forums a lot, you know, Jeremy, and so Vaughn trying to help out, and someone will post I had this error. They don't post the error. They don't post the relevant code, and then it wastes the time because the person responding has to be like, can you post the stacktrace? Can you post error messages, and then they come back and adjust. I'm so trying to just get in the habit of saying how can I make this concise, easy to understand and do my side of the work and then everyone else if you do that, everyone else will gladly meet you halfway. You know, even go out of their way to help you, I found the community to be pushing them. People are over the top helpful. And it's really cool because like you said, You saw it from the generation before you. And then it teaches you how to give to the people coming forward. So like, that's why I started a local coding group here to help people learn how to code. And that's why I try and reach out and help people who are just getting started in audio. I maintain the thread on the forums, as well as a couple telegram chats, and just trying to pay it forward continuously. And it's awesome because community just keeps growing keeps getting more knowledgeable, and it's just good for everybody.

Sanyam Bhutani  1:17:42  
I think the best part about the community is for people also to foster a community has a personal aspect to it. And people always mentioned that, hey, I'm really not able to get my head around this and I struggle with two days. And someone wouldn't just answer your question with you can Google this and you will find out that but they'll be like, hey, that's completely fine. It's It's a hard thing that's completely okay. It might take you longer. But here's how you do it. Just adding that little personal push might make a world of difference. And it has, to me at least. And I think every one of us I know, for your example also tries to be back in that sense.

Rob Bracco  1:18:22  
Yeah, definitely. And one of the things I want to add is that it's not completely I get a lot out of teaching. Like when I sit down with someone and try and teach a concept. I always learn new stuff. They just try things that I just wouldn't think to try. And as a result, you know, I end up learning new things about how different functions work, how different libraries work. Or I under I learned that I had an incomplete understanding of a concept when I go to explain it and they asked a question, and I say, I actually don't know that let me search it. So it will really help like, you know, I'm not going to go back and Look at every last thing about Python arrays and like Python lists basic things. Um, but through helping other people to learn those things, I eventually uncover those little bits of knowledge that I was either mistaken on or didn't know in the first place. So I think it's, you know, beneficial for both sides. I really think teaching just, I learned a ton. So I really would recommend it. If you're not doing it just to help other people out, do it for yourself. 

Sanyam Bhutani  1:19:26  
It's not  a hard requirement for sure. And I think you touched upon a very important topic, we don't teach the two. It's sort of passing on your passion and realization about all of these ideas to a new person who could use that help to skyrocket them towards where you're at, and I think they did different ways to it. For to give another example Radek creates are used to create the Kaggle starter packs. So he's not out there teaching everyone but he's creating those starter packs that create a substitute for them or now he's creating the quizzes around fast AI that again is a substitute to it. And these things give you the knowledge back in different ways that that only are realized after you do them.

Rob Bracco  1:20:11  
Yeah, absolutely the same with making a tutorial. You know, tutorial is essentially mentoring someone except that scale. Because now 10,000 people can consume it without your time. And I'm sure you've had this, when you're writing up about a paper you've read, you'll be explaining something and then you'll realize the part you don't actually understand. And then you go back and say, okay, I need to learn this so that I can explain it to others. And it really is a good way to take an inventory of how well you understand something as you try and explain it you'll just inevitably hit those parts that you maybe can't uncover on your own but that you don't actually understand yet. So yeah, that's a great piece of advice is you know, you can it doesn't have to be a one on one or even replying in the forums. It can just be producing resources that you think would help people understand a really core important topic.

Sanyam Bhutani  1:21:01  
I call it the 10 rupee 10 rupees for context is not even, not even $1 I'm trying to convert it in my head, but I don't know how much the amount is. It's one sixth of $1. So I call it the 10 rupee taste 10 rupee tightest where you buy a friend of yours a 10 rupee tie. And while they're trying to separate us sort of do elevator pitch of your tutorial and do it at a very, very meta level, which wouldn't work for any technical conversation. But if it's a high level overview, and if they're able to understand it, just because they're obliged to since you bought they will have a drink. And if we're not the head, and if they ask you a question back after it, you've passed the test and that's how I smoked test my ideas now.

Rob Bracco  1:21:48  
Interesting and you do that with people who are in the field or do you do it with people who are outside?

Sanyam Bhutani  1:21:53  
Completely outside, maybe even not even technical people. If it's a very denville idea that I'm writing about.

Rob Bracco  1:22:04  
Yeah, I do that that's what my fiance all day gets to hear about AI. I wouldn't even say she's outside the field at this point, because I've talked to her about it so much. She's like, legit knowledgeable, like I was working on audio data augmentation. And she suggested a method. And it was something that Google I don't remember what the method was, but she was like, why don't you try doing this? And it reminded me that Google had written a paper about it, like two years ago, the same augmentation and she's getting good.

Sanyam Bhutani  1:22:34  
How do you keep finding these ideas? So you knew that you want to work on audio and you've already shared your reason? Audience check out that interview if you haven't, but how do you know what what ideas to pick next already, when you know what you're working out and you might be already running out of ideas.

Rob Bracco  1:22:51  
There's no run out ideas. I feel. It's just a hierarchy. It's like I feel like there's so much out there. I just just generate more ideas than I'm able to keep up with. I'm sure you feel the same choosing which one is? Yeah, a good question. I just look at the couple Top Most Promising and see, one really good thing I learned a couple years ago is someone suggested, choose projects where even if you fail, even when if they're not successful, you'll still win. And what that means is say you're starting a business. If you start a business and the business fails, you don't make any money. Will you still have gained a bunch of stuff in either experience or skills, knowledge contacts, so I try and use that as a metric to look at if I am looking at a bunch of projects that might not succeed. I try and choose the ones that even if I fail, I'm going to come away winning. That's a good input. But yeah, really just following your passion like trying to build cool stuff. That's what keeps me the most motivated the most interested so I've been working on a fast AI audio Been working on some tutorials for Jupiter. I think there's a lot of really, really cool stuff that because Jupiter was built like, a long time ago and all our generation of data scientists are totally new. Not all but you know, there's a lot of people coming into the field. And I feel like there's so many things in Jupiter that were built in that everyone's just forgotten about. There's like some amazing functionality. So I'm working on some stuff related to that, that I'll release soon. I've been doing a lot of JavaScript, working to develop mobile apps, eventually. I like the idea of having a being able to take that idea, these crazy ideas I get, and have the entire stack of Python through machine learning through JavaScript to deployment on either web app or mobile. So I really liked the idea of so I'm, you know, practicing learning there, but it's just, it's almost too much to keep up with. But that's a good thing. Like you said, Everyone we've talked to who is pretty successful wakes up wanting to do this stuff. Yeah.

Sanyam Bhutani  1:25:01  
Do you find yourself heading off into tangents? Because that that's one thing that I even struggle with now. So you find something very interesting. You head off into a tangent. How do you batteries yourself to the original idea?

Unknown Speaker  1:25:13  
Yeah, it's almost like I get distracted from my distraction sometimes. So I'll be working on my main project of like, okay, I'm going to do just this this week, and then something kind of urgent comes up, and I'll get off on that. And I have to, it's almost like a stack trace, you have to go back down the pile back down to the bottom thing you were originally working on. I think that's personally probably a weakness of mind is I do tend to get a little bit off track there. Like I said, I think the reflection weekly helps because, you know, then I'm really forced to look at is this the best use of my time does this have to happen now? And sometimes the answer is yes. And that's okay. And you can, you can get off on side things. But I'm pretty good. One thing that really, really helps, and I encourage Everybody to do if you do find yourself doing that is keep a list and a document some type of structure somewhere where you can put those ideas so that you know, you're not going to lose them, you can get them out of your head. But I have I use a software called workflow a but it's really just like a nested list you can get pretty much any list software. And I keep a lot of stuff that I keep my ideas for potential projects, my ideas for things to write about my ideas for things I would like to teach her that I feel I could put into a tutorial. The million things I have to learn all different things, you know, pandas, pytorch, getting better at those things, certain tutorials, I put everything there and it's okay if it's in my kind of future pile and if I when I go needing things to look for or needing things to do, I go check it out and say, what, what goes to the front of the line. But I think one reason we get so attached to stuff and get distracted is because we feel like we don't do it now we won't ever do it. So I think having kind of a safe place. a system where you know you won't lose that thing will help you let go of it and say if it's really important, then it'll be there in a month.

Sanyam Bhutani  1:27:08  
For sure. And again, if something is trending in that week, it will be tempting to go out and check it out as soon as it comes out. And the ML community, the community of nerds that we are a part of Twitter amplifies that by the number of likes the number of retweets, and then you really curious to take that thing out. And if it's curiosity driven, you will realize how much time you already spent on it.

Rob Bracco  1:27:34  
Yeah, and I think that's a good thing. I think it's cool to get into like the latest stuff and play around with it. But I personally don't do that really myself. Maybe some in the audio space, but I think it might be good for and maybe you'll disagree here but it might be good for beginners and even intermediate people to avoid that kind of as a habit because things just pop up on the radar. Like It shouldn't net. Everyone was talking about how great it is. And now everyone's talking about how it doesn't actually do what it's promised because, uh, but anyway, you can just every week there's going to be a new thing and you could jump into it. But I think that's something you can wait for till you're, you know, doing machine learning research and you're kind of at the cutting edge. And for now, focus on fundamental stuff, things you need to learn. And the brilliant thing about it is, you know, you're not going to miss anything because Jeremy's gonna go make a new fast AI every year, and he's gonna take the best of everything, like he's gonna put it in there and teach you about it, so you're not going to miss it. And I think it is important to be on the cutting edge and do research when you're at that point. But I think you don't need to try the 50 new hot things that are coming out because only five of them are going to be around in five years, and Jeremy's gonna find them for you. So you can just kind of sit back and focus on other stuff that's more...

Sanyam Bhutani  1:28:56  
With a very high bs filter and with a very high aspect of noise. What things work would be there in the goals things that have been battle tested thoroughly.

Rob Bracco  1:29:05  
Yeah, absolutely like and you know, if they haven't been he'll go, he and subohm will do the research themselves. And we'll just try every hyper parameter combination, make sure it works on different data sets. It's resilient, it combines well with other things. So yeah, that's a really huge benefit to the community and takes that weight off your shoulders if you feel like you're missing like, I know, I still feel that way. Like I see like all these things going on with like the recent optimization functions and mission Ranger going around the forums. That looks so cool. I want to jump in like why am I not doing that, but the reality is with the current state of the art, from 2019 last year stuff, you can still get really cool, really great results. So just focus on building something cool. And then if you want later, you can get that extra half percent accuracy by adding a new optimization function.

Sanyam Bhutani  1:29:57  
That I think it again goes back to the goal setting scenario where you really need to know what you want out of the course, even for beginners. And I think I agree with you that if you keep jumping back and forth, for example, if you've signed up for the fast AI course, and fast AI doesn't cover right now attention, at least in the deep learning goes, and you discover that attention based models are attending, that might not be the best use of your time. Unless and until you already know the background details are the foundations that you absolutely need to before you can put those into good use. So that that could also be a good investment of your time, depending again, if your goal is demanded.

Rob Bracco  1:30:41  
Yeah, 100% and that's, that's the technique I use when I'm lost, and I'm not sure what to learn next. I go try and build the thing that's in my head. And I see where I get stuck. And so if you go and you're building something and you realize, oh, I don't know how to do this, or my optimization, this is unlikely, but my optimization function is just not cutting it, then go do that thing. But like, try and do what you set out to do, you didn't set out to learn the absolute best optimization function in the world. That's not why everyone came to machine learning. We all came here to make applications and to build stuff that's cool and put it out in the world. So try and do that and then learn what you have to do to do it. And yeah, I think there's like a really interesting divide there between two types of skills, the ones that are like the ones for programming that you need for building the stuff. So we talked about this a little bit, the beginning of the podcast, so, uh, you know, learning pytorch and how to use it or learning a specific technique, the very specific parts, and then there's the more general stuff we talked about, like becoming a better coder, having better practices, having good file hygiene, so not Having everything dumped in one folder together that are kind of more of the they paid dividends every day. And they're good for the long term. So how do you go about trying to decide? We talked a little earlier, but how to work in the those kind of skills that are. I'm not immediately useful, but again, a useful over time.

Sanyam Bhutani  1:32:28  
I think I think it again falls back to the goal setting. And so I'm in a weird situation where I have been educated either one on one level doing the podcast, so I understand what I need to know and what would be helpful. So my advice would be please go ahead and check out all of the interviews I've done to have that insight. And I'm not sure if you that might be worth your time. So I have a good sense of knowledge of how to navigate something and things that have really worked for other people. So that adds and adds a huge way to the idea of maybe learning all of the good strategies would be helpful. And yes, of course, that would be helpful. So I decided to invest time there may be investing time into Kaggle competition, building a single model, and not just trying to accuracy would be helpful. So maybe I should try and do that, which I haven't did. But I know for a fact that it will help. So this knowing these things, and looking out for what has worked really well for other people. And that's, that's the goal with the podcast also to be able to broadcast all of these ideas. But what has worked for other people at scale is supposed to help you also, unless you absolutely have that gut feeling that this thing is going to do it better for you then go ahead and do it and you might create a deal to fight.

Rob Bracco  1:33:54  
Yeah, yeah, absolutely. Um, yeah, I would also recommend people to go back and listen to To the podcasts, read the blogs just there's so many little pieces of wisdom that there's just no other way to pick up. Tips people give as kind of throwaways that you'll look back on two years later and realize like how much they changed stuff for you. Like one was, we've talked about radec in the podcast so far, but he just said, never do anything that takes more than I think 15 or 30 seconds. [Yeah] So like, if you're training your model, train it on tiny little chunks so that you don't have to sit there for three minutes, you will get distracted. And I didn't realize how important that was, especially when I have limited time because I'm doing the whole deep work thing. So I can't afford to get distracted. And yeah, that was something I just read off hand. And another one was he showed that a Jupyter has a debugger. He did that in one of his tweets and that just saved me hours of going back and putting print statements I decided that's an example of kind of a skill that pays dividends over time, it's learning how to use a debugger in the proper way. Something I put off for a really long time thinking would be harder than it is. [Yeah] Those types of things getting a little bit better at like Linux command line, just the things that you have to do on a daily basis to do the really important things, the model, building the application, building those things because if you're trying to do you know, you're always going to be kind of at your cutting edge. And with the model building, you're always going to be doing something that's pretty hard for you. So just having the ability to be solid in those other areas and not have to worry about them. I find that the hardest thing probably as a beginner is you have four or five different areas where you're weak, and they just overlap in certain ways that it's just really difficult to overcome when you're trying to you know, try something new in Python, and you go to the Linux command line to install library and you get some error you've never seen. And just going down that chain is, it's really hard to just feel you've run from one bug to the next.

Sanyam Bhutani  1:36:10  
For the for the record, I don't absolutely recommend my content. I unfortunately don't have any other we figured out yet how to get those throw wisdoms out there, like you did with things Jeremy says to do, which, again, is an awesome thread that I think we will also try to convert into a podcast. But I think you need to figure out ways of how to gather wisdom from the really smart people either through reading all of the comments on a forum or just closely observing on about how they function. If for example, you are in competition similar to another person and then you really get to observe how they are progressing. Or you might get to team up with them and understand how they function and take that wisdom away. I don't think there's any other substitute for that.

Rob Bracco  1:37:01  
Yeah, I think that's one of the most important meta skills you can have is just learning to take things from other people and see this person does this or this person did this thing I want to replicate, how did they do it, and then trying to look into stuff they've written, and see how you could adjust your behavior to follow their path more closely since they were so successful. I mean, we've got a lot of examples of people who've done really amazing things in the community. So you know, take your pick.

Sanyam Bhutani  1:37:30  
And again, going back to the question, no one does it because they just want to help the community. It's part of the process and things really fit nicely into the picture for them. But I think generally speaking for anyone in the data science world they enjoy helping newbies also in any capacity that they like paid. Direct tutorials, be it writing blog post gunnels discussions in and beyond that also.

Rob Bracco  1:38:02  
Yeah, it's super fulfilling. Like I've, again, not done much writing. But the few pieces I have done, I wrote intro to audio tutorial, and I'll occasionally get someone to reach out and say it was helpful and that, you know, makes my day when people do it. So I think that it's really nice to just help out and feel like you're adding value.

Sanyam Bhutani  1:38:21  
I think that's that's also another interesting aspect. And I'd be curious to know how would you discover things that you want to write about? Do you do look for gaps or new follow the trend and see where the gaps are in that trend? Or do this follow your curiosity and then think of writing it down?

Rob Bracco  1:38:38  
Yeah, I, I usually try to write about something I've recently learned. But I don't feel like there was a good resource for so I try and invent it and audio is a perfect example of that. I started out learning audio from scratch. I didn't know anything, didn't know what sample rates or spectrograms were or how audio worked. And I cobbled together my self education from, you know, 20 or 30 different resources. I'd read an article here about this one thing, and then another article from here. And there was no just introduction to audio for people who wanted to build machine learning audio applications. And so I tried to take kind of the best bits and pieces of knowledge and structure them. And actually, it's something I'm really looking forward to refactoring. I feel like it was a good guide, but I read a great piece I we can post in the show notes that was passed on to me by some of the people in our audio thread, and it's about how to do technical writing. And the for different purposes, whether it's documentation, a tutorial, how to guide, or there's another one, but we can post that and it was really enlightening to see how looking at it from this perspective of four different categories and what the goals are. And I realized that a lot of writing out their mind included is mixing multiple purposes and is leading it to being less effective than it could be if you stuck to one. Um, another thing I'd encourage people to do that I didn't do in the past I've kind of realized lately is it's really tempting to write you know, when you learn something new, and you really understand, it's really exciting to write about the why, and you know, why this works and all that. But sometimes you're going to be meeting users who just want to know how they just want the code, they just want the line. That's okay, they might have a deadline tomorrow. So I found a lot of documentation out there, where the how is buried in the why. A perfect example is Jupyter extensions. So most people I know don't use extensions for Jupiter, even though they're really, really essential. They just do so much to make notebooks more usable, more readable, and I personally procrastinated on it for a year. was on my list and that file, things to do learn how to use Jupyter extensions. And it's a really basic thing. But there's three lines you need to install and their space throughout the documentation. There's like two lines here. And then there's another line that's, you know, two thirds of the way down the page. Before they tell you that line, they explain an alternative way to do it. That takes about two paragraphs. And then they explained that's actually the worst way to do it. And they say, we suggest you do it this way. And so between all that they've buried the how, in the why, and made it so that no one's using it, you should give the power up front, whether it's too long, didn't read, here's the code. Here's what I'm trying to say and just offer that value to the people who want it. And then the people who want the Y will stick around for it the people who need to understand but not everyone needs to understand. I've realized that and now I see it everywhere when I'm reading. There's so many resources that just don't tell you what you need to know, because they're caught up in the writing and the act of it. Which is fine, but it would be just great to have that summary up the top. If you're having a day where you just need to get things done, and here you go, this is what you need to know, if you want to read on and you really need a deeper understanding, here's that.

Sanyam Bhutani  1:42:10  
It's actually very interesting because you can never know. And the only way to assess this because you don't always get a lot of comments unless you made a blunder or a mistake in it. You will you will continue growing the audience, the views will keep going up and to a person who's broadcasting that might be a positive sign. Because they will be also people who just looking for the Y that like you mentioned, and they'll also be people that are just looking for the how it's difficult to distinguish the two aspects of how should you deliver information and how should you digest information that's again, an iterative process. And the problem with broadcasting or this writing tutorials is you will struggle with feedback a lot. And secondly, because you're already struggling with the feedback, a single feedback could completely derail you, because that's the only feedback that you have. Or that's the only comment that you have. So you need to figure out how to digest the feedback, how to digest the content or how to deliver it also.

Rob Bracco  1:43:14  
Yeah, definitely, I think maybe the one way because yeah, you're right, there really is a lack of feedback out there, on writing and on technical writing. Maybe just trying to be more aware when reading and trying to learn something yourself, of what your purpose is, when you're reading it. Am I just trying to get something done? Am I trying to understand the concept, and then seeing what helps and what doesn't? And how? Because it's a lot easier when you take the perspective of the reader, which we're all out there. I know reading tons of things on medium and reading about the latest tech so I think it's easy to kind of put those shoes on and see how can I be a better writer by focusing on what's hard for you when you're a reader.

Sanyam Bhutani  1:43:59  
Definitely. 

Rob Bracco  1:44:01  
One other thing is how do you go about you know there's people of all different skill levels throughout the community and you want to reach all of them. You want to reach you know the Kaggle Grand Masters as well as the person who's fast AI day one. So how do you structure your writing to have the kind of maximum readability to reach the beginners but without boring the experts.

Sanyam Bhutani  1:44:24  
I don't think I do a good job at it but being upfront about what I'm trying to do deliver for example, and I found this really good example and I am sure it wouldn't work for everything but one of my best Kaggle kernels the one that has a gold medal on it is about faster image augmentations. The way I structured it is delivering you some information through analog ease. And like you said I first about the how okay, this is this augmentation and picking one single examples just so that I can show you how does it compare across a single augmentation. So you really know, okay, this is what's going on, and why is covered in okay, for example, if you want to do vertical flips, that might be useful in a summer day pool detection situation where that's where you could do and then having the code indexed inside of there. And visiting that silly coming up on Kaggle kernels also. So if a business person is looking at a really good kernel, good in double quotes, but the code would already be hidden, and they'll be a really nice story around it. Because, again, data science is meant for people who are from the business world. That's why there's so much money pouring into it. So you need to be good at sending out the information. And for someone who's trying to build on top of it, you also need to have the code in there. So the way I structured that particular one example was I had the complete code, and also the story in the kernel. And in the blog post, I just hide this story with very minimal code and pointers to the colonel constantly. So okay, if you want to check out the technical details, so to speak, go to the end.

Rob Bracco  1:46:07  
That's a really nice way of structuring it yeah. It's almost like having two separate pieces so that you can kind of reach both sides, but also offering it to anyone who wants to consume both so.

Sanyam Bhutani  1:46:19  
This was one good example where it really worked. And I can understand that it wouldn't wouldn't work for a wide variety of situations. But if if that works for you, that's a really good way. And that's why many, many blog posts leave the GitHub link right at the top. So if you're the kind of person that likes to download the notebook and run the experiment for themself, and I know many people do that even with research papers, go ahead and do that by all means you have absolutely don't need to read the blog post or if you need some context, go ahead and read it. 

Rob Bracco  1:46:53  
Yeah, I'm one other thing I thought about I've seen so much have you played around with Nvidiea, the new notebook [I haven't. Not yet] There's a lot of cool stuff going on, but it just opens up so many doors. So you could almost to explain to the users inside of the Jupiter cells, you can put little hashtags that will cause different functionality. So if you put hash tag export inside of a cell, the code from that cell will be exported to a Python file so it can be treated like a normal library module. But it just opens the door to so many different things. Like the ability to have a in a blog style post the cells coded by a difficulty level. So you can have a more in depth explanation that goes and is only shown to beginners or something that's and the beginners can choose to hide the stuff that like really gets in the weeds and then everyone can be looking at a different document or a different tutorial kind of dynamically. So that idea just randomly popped in my head.

Sanyam Bhutani  1:48:02  
I think. I think it really works for the fast AI also, Jeremy me shows us with if you shift up once you get some information if you shipped up twice, get the documentation. And then if if you really crazy you can go ahead and look at the source code also. So depending on what your requirement of the I would say need of your hour follow any level of depth that you want.

Rob Bracco  1:48:29  
Yeah, I would love to see something like that applied to blogs, in the general the ability to like Shift Tab like, show me more, Shift Tab show me more. So maybe in the future, they're doing a lot of cool, really experimental stuff. So [Yeah] Let's see. Anything else you want to talk about today? I got one more thing I wanted to get in there. 

Sanyam Bhutani  1:48:52  
I have had heard already. I know this part of the video doesn't appear for the audience. But I think you might notice this is my 11th cup of Chai. I think; 

Rob Bracco  1:49:03  
Where are they coming from?

Sanyam Bhutani  1:49:05  
I have a jar like, right next to me, which I fill up because I knew this was going to be an interesting conversation.

Rob Bracco  1:49:12  
Yeah. 

Sanyam Bhutani  1:49:13  
I pretty much asked all of my questions that I had for you.

Rob Bracco  1:49:18  
Um, so one more I had or one idea I wanted to bring out is Do you ever use any type of like flashcards or memorization tools? Or have you heard of Anki?

Sanyam Bhutani  1:49:30  
I have I tried to use them. But again, that's an explicit habit that doesn't come into my procrastination schedule. What I try to do is keep notes, keep notes in different formats. And I've even gone out to the expense of buying apps on iPad with no one likes to very honestly speak even if they might be for $1 or two, just because I have a Apple Pencil not being an endorser of any products, but because I assumed writing the notes there would have been a And then again, I just keep defaulting to the situation where I just try to remember it because and I don't think I have a good memory. But just remembering the little details. And this has worked well, for me even in general context where I just try to remember the things that are important. I definitely forget the ones that are not important. And that does cause a lot of mess ups here and there, but I just use a mental retainer of everything. So that automatically filters out words not necessary for me, which I don't recommend. 

Rob Bracco  1:50:34  
Do you come back to the notes and like, just review them every? 

Sanyam Bhutani  1:50:38  
I do, I do. Because for example, and other people already take care of this. So if you enjoy someone's notes already so much, for example, I really like Hiromi his notes for fast AI I absolutely know that I don't need to create a replica of this. This is the best thing that I could ask for. There's no shame in me using that already. Something that someone is created.

Rob Bracco  1:51:00  
Oh, yeah, absolutely. those notes are just incredible resource for anyone. Hopefully, we'll have something similar for the next round of fast AI.

Sanyam Bhutani  1:51:09  
The same question for you. Do you find any other things interesting in this aspect?

Rob Bracco  1:51:15  
Yeah, I use Anki. Like, fairly religiously, I'd say. It's, it's something actually, I've heard Jeremy talk about it a decent amount because he uses it for language. But says don't use coding. [Yeah] And I would say I disagree. I've been using it for coding and love it not for memorizing code. But I think there's just so much out there. We're learning from so many different areas. I initially kind of early on would have the trouble of, you know, I would go do something in one area of coding, like I would build a website using Django Python web framework. And I would go do my normal machine learning stuff and I'd come back four months later, and I built this big application like actually working in the real world, and I wouldn't even know like how to start it back up, I wouldn't know the basics. So I was like, because I was hopping between so many things, I felt like I was really just spinning my wheels and not not remembering any of it. I was just spending all this time repeat learning. So what I ended up doing was starting to try out and play with Anki for so for those who don't know, Anki is a space memory repetition system. It's like a flash card system. But since it's a computer, it remembers, every time you've ever seen a given flash card, and how many times you've gotten it right and wrong and from that it calculates the optimal time to show it to you again. And that way you spend more time focusing on the things you have trouble with and things you find easy. You know, you won't see it again for a year. So it's really nice. It just handles the scheduling for you. It handles the studying each day you just sit down for 510 minutes and do a set of flashcards you have to do the discipline part. But that's one area where I disagree with Jeremy, he said that he hadn't found it useful for coding.

Sanyam Bhutani  1:53:07  
I think I think the factor of having the proficiency and experience also counts in there. So I feel like I can I can speak for the both of us I think we really new to the field and he's been doing it for all of these years. I two very good level at a very perfect level. So maybe it's not for him, but I think I can see being useful for us.

Rob Bracco  1:53:29  
Yeah, that was exactly my reasoning when I heard him say as I was because you're the master, you know, he can switch between me to do technology so quickly, and he does Don't get me wrong, he has a really good reason. He says that, if you use a certain technology, like you know, you're in there using Jupyter VS code, and you just use it, you will remember the stuff which is true, but you know, when you're being constantly introduced to all these new concepts across all these different sub domains, I found it really useful because what I found how during the time around when I realized that is when I was in fast AI, and I was trying to learn kind of new concepts. And I realized that the underlying concepts that I that those things were based on in building off of a, I was shaky on. So I'd be trying to understand for just a throw a random example out there probably, which is where you put the activation function inside of a red block before the skip connection before the identity connection that makes no sense. Don't worry about it. But you can see it relies on a lot of different terms. And if you're not totally sure about every single one of those, it's really hard to get to that next level concept. So what I found was that a lot of the time I was stuck. It wasn't because the new concept was hard, but it was because I didn't have a concise internalized representation of the stuff that was built on top of. So I felt that going back and saying just you know, making cards for how to do things, both coding and conceptual, um, was really, really helpful. I feel like a superpower for me. And I feel like I don't have to go back and take courses multiple times, or as many times, you know, I still take end up taking fast AI part one three times. Because it's, you know, so dense and there's so much there, you can really get information from it as you go back over it. Yeah, I found that it's really lowered my it's increased my retention and lower my need to go back and retake courses and things like JavaScript, just to know basic things that they throw out in a class about how language works. But that you'll likely just forget in a week or two.

Sanyam Bhutani  1:55:46  
I think there's also another factor of how well established are you in your framework and how I like to think of it is if you're getting frustrated is because you have this gap of your goals and where you currently are at and if you're not hitting your goals that Because that's because you already know you can do better. That's depending again, you might not be in the same situation is the case for me if if I'm getting frustrated is because I'm not hitting my goals, even though I know I can, maybe argue might help. So just having that reflection, and I think you already do it every every week, but really understanding how you work in your framework that you constantly have to reevaluate, and then using Anki or notes or different formats could could be useful.

Rob Bracco  1:56:33  
Yeah, absolutely. It's definitely not for everyone, but it's one of the tools to kind of consider I think it's important that people find what works for them, like you found notes, but just having something there, being able to identify problems, like my problem was, you know, I just did this thing three months ago. How is it I've already forgotten it and my solution was Anki. For someone who has a more consistent memory that might not be necessary. But just that you've hit exactly the key point is to identify your problems, fix them, things get a little easier each week. Just do that and you'll be a Grand Master in no time. 

Sanyam Bhutani  1:57:12  
Awesome. Should we end on that note? Or do you have any other ideas because I've already run out of time and ideas.

Rob Bracco  1:57:22  
And ideas. I think that was good. I think we touched on a ton of stuff. I had a great time.

Sanyam Bhutani  1:57:32  
liquids. I hope the audience will excuse me if they're not here for my views. But thank you for keeping the conversation going. And thank you for saying yes to this crazy idea.

Rob Bracco  1:57:43  
Yeah, likewise, thanks for inviting me on.

Sanyam Bhutani  1:57:52  
Thank you so much for listening to this episode. If you enjoyed the show, please be sure to give it a review or feel free to shoot me a message you can find All of the social media links in the description. If you like the show, please subscribe and tune in each week to "Chai Time Data Science."

